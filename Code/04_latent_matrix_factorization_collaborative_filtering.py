# -*- coding: utf-8 -*-
"""Surprise_CMPE257-MovieRecommenderSystem_Updated.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1781QU11zawX6fK2SZ_OK2tq20kzmEH4k

### Import necessary modules
"""

# Commented out IPython magic to ensure Python compatibility.
#data analysis libraries 
import numpy as np
import pandas as pd
from sklearn.preprocessing import MultiLabelBinarizer

#visualization libraries
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

#ignore warnings
import warnings
warnings.filterwarnings('ignore')

# Enable multiple output cells
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

# !pip install nbdev
!pip install surprise

from google.colab import drive
drive.mount('/content/drive')

from surprise import SVD
from surprise import KNNBasic
from surprise import Dataset
from surprise.prediction_algorithms import SVDpp
from surprise.model_selection import cross_validate
from surprise.model_selection import GridSearchCV

"""Training for MovieLens 100k without GridSearchCV

"""

# Load the movielens-100k dataset (download it if needed).
data = Dataset.load_builtin('ml-100k')
data1m = Dataset.load_builtin('ml-1m')

algo = KNNBasic()
# Run 5-fold cross-validation and print results.
cross_validate(algo, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)

# Use the famous SVD algorithm.
algo = SVD()

# Run 5-fold cross-validation and print results.
cross_validate(algo, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)

algo = SVDpp()
# Run 5-fold cross-validation and print results.
cross_validate(algo, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)

"""Training for MovieLens 100k using GridSearchCV

"""

parameters = {
              'reg_all' : [0.01, 0.02, 0.1],
              'n_epochs' : [5, 10, 20],
              'lr_all' : [0.001, 0.005, 0.01]
              }

# GridSearch for SVD
gridsearchsvd = GridSearchCV(SVD, param_grid = parameters, measures=["rmse", "mae"], n_jobs=-1, cv = 5)
gridsearchsvd.fit(data)

# find the best RMSE score
print(gridsearchsvd.best_score["rmse"])

# find the combination of the parameters that gave the best RMSE score
print(gridsearchsvd.best_params["rmse"])

"""SVD using results from GridSearchCV"""

gridcv_svd = SVD(n_factors = 20, n_epochs = 20, lr_all = 0.01, reg_all = 0.1)
# Run 5-fold cross-validation and print results.
cross_validate(gridcv_svd, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)

gridcv_svd = SVD(n_factors = 40, n_epochs = 20, lr_all = 0.01, reg_all = 0.1)
# Run 5-fold cross-validation and print results.
cross_validate(gridcv_svd, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)

gridcv_svd = SVD(n_factors = 60, n_epochs = 20, lr_all = 0.01, reg_all = 0.1)
# Run 5-fold cross-validation and print results.
cross_validate(gridcv_svd, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)

# GridSearch for SVDpp
gridsearchsvdpp = GridSearchCV(SVDpp, param_grid = parameters, measures=["rmse", "mae"], n_jobs=-1, cv = 5)
gridsearchsvdpp.fit(data)

# find the best RMSE score
print(gridsearchsvdpp.best_score["rmse"])

# find the combination of the parameters that gave the best RMSE score
print(gridsearchsvdpp.best_params["rmse"])

gridcv_svdpp = SVDpp(n_factors = 40, n_epochs = 20, lr_all = 0.005, reg_all = 0.01)
# Run 5-fold cross-validation and print results.
cross_validate(gridcv_svdpp, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)

"""Training for MovieLens 1 million without GridSearchCV

"""



algo = KNNBasic()
# Run 5-fold cross-validation and print results.
cross_validate(algo, data1m, measures=['RMSE', 'MAE'], cv=5, verbose=True)

# Use the famous SVD algorithm.
algo = SVD()

# Run 5-fold cross-validation and print results.
cross_validate(algo, data1m, measures=['RMSE', 'MAE'], cv=5, verbose=True)

algo = SVDpp()
# Run 5-fold cross-validation and print results.
cross_validate(algo, data1m, measures=['RMSE', 'MAE'], cv=5, verbose=True)

# GridSearch for SVD
gridsearchsvdpp = GridSearchCV(SVDpp, param_grid = parameters, measures=["rmse", "mae"], n_jobs=-1, cv = 5)
gridsearchsvdpp.fit(data1m)

# find the best RMSE score
print(gridsearchsvdpp.best_score["rmse"])

# find the combination of the parameters that gave the best RMSE score
print(gridsearchsvdpp.best_params["rmse"])